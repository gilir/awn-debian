/* dock-manager-api.h generated by valac 0.10.4, the Vala compiler, do not modify */


#ifndef __DOCK_MANAGER_API_H__
#define __DOCK_MANAGER_API_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <dbus/dbus-glib-lowlevel.h>
#include <dbus/dbus-glib.h>
#include <task-manager.h>
#include <task-icon.h>

G_BEGIN_DECLS


#define TYPE_DOCK_MANAGER_DBUS_INTERFACE (dock_manager_dbus_interface_get_type ())
#define DOCK_MANAGER_DBUS_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DOCK_MANAGER_DBUS_INTERFACE, DockManagerDBusInterface))
#define IS_DOCK_MANAGER_DBUS_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DOCK_MANAGER_DBUS_INTERFACE))
#define DOCK_MANAGER_DBUS_INTERFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_DOCK_MANAGER_DBUS_INTERFACE, DockManagerDBusInterfaceIface))

typedef struct _DockManagerDBusInterface DockManagerDBusInterface;
typedef struct _DockManagerDBusInterfaceIface DockManagerDBusInterfaceIface;

#define TYPE_DOCK_ITEM_DBUS_INTERFACE (dock_item_dbus_interface_get_type ())
#define DOCK_ITEM_DBUS_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DOCK_ITEM_DBUS_INTERFACE, DockItemDBusInterface))
#define IS_DOCK_ITEM_DBUS_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DOCK_ITEM_DBUS_INTERFACE))
#define DOCK_ITEM_DBUS_INTERFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_DOCK_ITEM_DBUS_INTERFACE, DockItemDBusInterfaceIface))

typedef struct _DockItemDBusInterface DockItemDBusInterface;
typedef struct _DockItemDBusInterfaceIface DockItemDBusInterfaceIface;

#define TYPE_TASK_MANAGER_DISPATCHER (task_manager_dispatcher_get_type ())
#define TASK_MANAGER_DISPATCHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TASK_MANAGER_DISPATCHER, TaskManagerDispatcher))
#define TASK_MANAGER_DISPATCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TASK_MANAGER_DISPATCHER, TaskManagerDispatcherClass))
#define IS_TASK_MANAGER_DISPATCHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TASK_MANAGER_DISPATCHER))
#define IS_TASK_MANAGER_DISPATCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TASK_MANAGER_DISPATCHER))
#define TASK_MANAGER_DISPATCHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TASK_MANAGER_DISPATCHER, TaskManagerDispatcherClass))

typedef struct _TaskManagerDispatcher TaskManagerDispatcher;
typedef struct _TaskManagerDispatcherClass TaskManagerDispatcherClass;
typedef struct _TaskManagerDispatcherPrivate TaskManagerDispatcherPrivate;

#define TYPE_TASK_ICON_DISPATCHER (task_icon_dispatcher_get_type ())
#define TASK_ICON_DISPATCHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TASK_ICON_DISPATCHER, TaskIconDispatcher))
#define TASK_ICON_DISPATCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TASK_ICON_DISPATCHER, TaskIconDispatcherClass))
#define IS_TASK_ICON_DISPATCHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TASK_ICON_DISPATCHER))
#define IS_TASK_ICON_DISPATCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TASK_ICON_DISPATCHER))
#define TASK_ICON_DISPATCHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TASK_ICON_DISPATCHER, TaskIconDispatcherClass))

typedef struct _TaskIconDispatcher TaskIconDispatcher;
typedef struct _TaskIconDispatcherClass TaskIconDispatcherClass;
typedef struct _TaskIconDispatcherPrivate TaskIconDispatcherPrivate;

struct _DockManagerDBusInterfaceIface {
	GTypeInterface parent_iface;
	char** (*get_capabilities) (DockManagerDBusInterface* self, int* result_length1, GError** error);
	char** (*get_items) (DockManagerDBusInterface* self, int* result_length1, GError** error);
	char** (*get_items_by_name) (DockManagerDBusInterface* self, const char* name, int* result_length1, GError** error);
	char** (*get_items_by_desktop_file) (DockManagerDBusInterface* self, const char* desktop_file, int* result_length1, GError** error);
	char** (*get_items_by_pid) (DockManagerDBusInterface* self, gint pid, int* result_length1, GError** error);
	char* (*get_item_by_xid) (DockManagerDBusInterface* self, gint64 xid, GError** error);
	void (*awn_set_visibility) (DockManagerDBusInterface* self, const char* win_name, gboolean visible, GError** error);
	char* (*awn_register_proxy_item) (DockManagerDBusInterface* self, const char* desktop_file, const char* uri, GError** error);
};

struct _DockItemDBusInterfaceIface {
	GTypeInterface parent_iface;
	gint (*add_menu_item) (DockItemDBusInterface* self, GHashTable* menu_hints, GError** error);
	void (*remove_menu_item) (DockItemDBusInterface* self, gint id, GError** error);
	void (*update_dock_item) (DockItemDBusInterface* self, GHashTable* hints, GError** error);
	char* (*get_desktop_file) (DockItemDBusInterface* self);
	char* (*get_uri) (DockItemDBusInterface* self);
};

struct _TaskManagerDispatcher {
	GObject parent_instance;
	TaskManagerDispatcherPrivate * priv;
};

struct _TaskManagerDispatcherClass {
	GObjectClass parent_class;
};

struct _TaskIconDispatcher {
	GObject parent_instance;
	TaskIconDispatcherPrivate * priv;
};

struct _TaskIconDispatcherClass {
	GObjectClass parent_class;
};


DockManagerDBusInterface* dock_manager_dbus_interface_dbus_proxy_new (DBusGConnection* connection, const char* name, const char* path);
GType dock_manager_dbus_interface_get_type (void) G_GNUC_CONST;
char** dock_manager_dbus_interface_get_capabilities (DockManagerDBusInterface* self, int* result_length1, GError** error);
char** dock_manager_dbus_interface_get_items (DockManagerDBusInterface* self, int* result_length1, GError** error);
char** dock_manager_dbus_interface_get_items_by_name (DockManagerDBusInterface* self, const char* name, int* result_length1, GError** error);
char** dock_manager_dbus_interface_get_items_by_desktop_file (DockManagerDBusInterface* self, const char* desktop_file, int* result_length1, GError** error);
char** dock_manager_dbus_interface_get_items_by_pid (DockManagerDBusInterface* self, gint pid, int* result_length1, GError** error);
char* dock_manager_dbus_interface_get_item_by_xid (DockManagerDBusInterface* self, gint64 xid, GError** error);
void dock_manager_dbus_interface_awn_set_visibility (DockManagerDBusInterface* self, const char* win_name, gboolean visible, GError** error);
char* dock_manager_dbus_interface_awn_register_proxy_item (DockManagerDBusInterface* self, const char* desktop_file, const char* uri, GError** error);
DockItemDBusInterface* dock_item_dbus_interface_dbus_proxy_new (DBusGConnection* connection, const char* name, const char* path);
GType dock_item_dbus_interface_get_type (void) G_GNUC_CONST;
gint dock_item_dbus_interface_add_menu_item (DockItemDBusInterface* self, GHashTable* menu_hints, GError** error);
void dock_item_dbus_interface_remove_menu_item (DockItemDBusInterface* self, gint id, GError** error);
void dock_item_dbus_interface_update_dock_item (DockItemDBusInterface* self, GHashTable* hints, GError** error);
char* dock_item_dbus_interface_get_desktop_file (DockItemDBusInterface* self);
char* dock_item_dbus_interface_get_uri (DockItemDBusInterface* self);
GType task_manager_dispatcher_get_type (void) G_GNUC_CONST;
TaskManagerDispatcher* task_manager_dispatcher_new (TaskManager* manager);
TaskManagerDispatcher* task_manager_dispatcher_construct (GType object_type, TaskManager* manager);
TaskManager* task_manager_dispatcher_get_manager (TaskManagerDispatcher* self);
GType task_icon_dispatcher_get_type (void) G_GNUC_CONST;
TaskIconDispatcher* task_icon_dispatcher_new (TaskIcon* icon);
TaskIconDispatcher* task_icon_dispatcher_construct (GType object_type, TaskIcon* icon);
const char* task_icon_dispatcher_get_object_path (TaskIconDispatcher* self);
void task_icon_dispatcher_set_object_path (TaskIconDispatcher* self, const char* value);


G_END_DECLS

#endif
