<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="AwnApplet">
<refmeta>
<refentrytitle role="top_of_page" id="AwnApplet.top_of_page">AwnApplet</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBAWN Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AwnApplet</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="AwnApplet.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="AwnAppletPrivate">AwnAppletPrivate</link>;
                    <link linkend="AwnApplet-struct">AwnApplet</link>;
<link linkend="gboolean">gboolean</link>            (<link linkend="AwnAppletInitFunc">*AwnAppletInitFunc</link>)                (<link linkend="AwnApplet">AwnApplet</link> *applet);
<link linkend="AwnApplet">AwnApplet</link> *         (<link linkend="AwnAppletInitPFunc">*AwnAppletInitPFunc</link>)               (const <link linkend="gchar">gchar</link> *canonical_name,
                                                         const <link linkend="gchar">gchar</link> *uid,
                                                         <link linkend="gint">gint</link> panel_id);
<link linkend="AwnApplet">AwnApplet</link> *         <link linkend="awn-applet-new">awn_applet_new</link>                      (const <link linkend="gchar">gchar</link> *canonical_name,
                                                         const <link linkend="gchar">gchar</link> *uid,
                                                         <link linkend="gint">gint</link> panel_id);
const <link linkend="gchar">gchar</link>*        <link linkend="awn-applet-get-canonical-name">awn_applet_get_canonical_name</link>       (<link linkend="AwnApplet">AwnApplet</link> *applet);
<link linkend="GtkPositionType">GtkPositionType</link>     <link linkend="awn-applet-get-pos-type">awn_applet_get_pos_type</link>             (<link linkend="AwnApplet">AwnApplet</link> *applet);
<link linkend="void">void</link>                <link linkend="awn-applet-set-pos-type">awn_applet_set_pos_type</link>             (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="GtkPositionType">GtkPositionType</link> position);
<link linkend="AwnPathType">AwnPathType</link>         <link linkend="awn-applet-get-path-type">awn_applet_get_path_type</link>            (<link linkend="AwnApplet">AwnApplet</link> *applet);
<link linkend="void">void</link>                <link linkend="awn-applet-set-path-type">awn_applet_set_path_type</link>            (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="AwnPathType">AwnPathType</link> path);
<link linkend="gint">gint</link>                <link linkend="awn-applet-get-offset">awn_applet_get_offset</link>               (<link linkend="AwnApplet">AwnApplet</link> *applet);
<link linkend="gint">gint</link>                <link linkend="awn-applet-get-offset-at">awn_applet_get_offset_at</link>            (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y);
<link linkend="void">void</link>                <link linkend="awn-applet-set-offset">awn_applet_set_offset</link>               (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="gint">gint</link> offset);
<link linkend="gint">gint</link>                <link linkend="awn-applet-get-size">awn_applet_get_size</link>                 (<link linkend="AwnApplet">AwnApplet</link> *applet);
<link linkend="void">void</link>                <link linkend="awn-applet-set-size">awn_applet_set_size</link>                 (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="gint">gint</link> size);
const <link linkend="gchar">gchar</link> *       <link linkend="awn-applet-get-uid">awn_applet_get_uid</link>                  (<link linkend="AwnApplet">AwnApplet</link> *applet);
<link linkend="void">void</link>                <link linkend="awn-applet-set-uid">awn_applet_set_uid</link>                  (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         const <link linkend="gchar">gchar</link> *uid);
<link linkend="AwnAppletFlags">AwnAppletFlags</link>      <link linkend="awn-applet-get-behavior">awn_applet_get_behavior</link>             (<link linkend="AwnApplet">AwnApplet</link> *applet);
<link linkend="void">void</link>                <link linkend="awn-applet-set-behavior">awn_applet_set_behavior</link>             (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="AwnAppletFlags">AwnAppletFlags</link> flags);
<link linkend="GtkWidget">GtkWidget</link>*          <link linkend="awn-applet-create-default-menu">awn_applet_create_default_menu</link>      (<link linkend="AwnApplet">AwnApplet</link> *applet);
<link linkend="guint">guint</link>               <link linkend="awn-applet-inhibit-autohide">awn_applet_inhibit_autohide</link>         (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         const <link linkend="gchar">gchar</link> *reason);
<link linkend="void">void</link>                <link linkend="awn-applet-uninhibit-autohide">awn_applet_uninhibit_autohide</link>       (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="guint">guint</link> cookie);
<link linkend="GdkNativeWindow">GdkNativeWindow</link>     <link linkend="awn-applet-docklet-request">awn_applet_docklet_request</link>          (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="gint">gint</link> min_size,
                                                         <link linkend="gboolean">gboolean</link> shrink,
                                                         <link linkend="gboolean">gboolean</link> expand);
<link linkend="GtkWidget">GtkWidget</link> *         <link linkend="awn-applet-create-pref-item">awn_applet_create_pref_item</link>         (void);
<link linkend="GtkWidget">GtkWidget</link> *         <link linkend="awn-applet-create-about-item">awn_applet_create_about_item</link>        (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         const <link linkend="gchar">gchar</link> *copyright,
                                                         <link linkend="AwnAppletLicense">AwnAppletLicense</link> license,
                                                         const <link linkend="gchar">gchar</link> *version,
                                                         const <link linkend="gchar">gchar</link> *comments,
                                                         const <link linkend="gchar">gchar</link> *website,
                                                         const <link linkend="gchar">gchar</link> *website_label,
                                                         const <link linkend="gchar">gchar</link> *icon_name,
                                                         const <link linkend="gchar">gchar</link> *translator_credits,
                                                         const <link linkend="gchar">gchar</link> **authors,
                                                         const <link linkend="gchar">gchar</link> **artists,
                                                         const <link linkend="gchar">gchar</link> **documenters);
<link linkend="GtkWidget">GtkWidget</link> *         <link linkend="awn-applet-create-about-item-simple">awn_applet_create_about_item_simple</link> (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         const <link linkend="gchar">gchar</link> *copyright,
                                                         <link linkend="AwnAppletLicense">AwnAppletLicense</link> license,
                                                         const <link linkend="gchar">gchar</link> *version);
</synopsis>
</refsynopsisdiv>

<refsect1 id="AwnApplet.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="GInitiallyUnowned">GInitiallyUnowned</link>
         +----<link linkend="GtkObject">GtkObject</link>
               +----<link linkend="GtkWidget">GtkWidget</link>
                     +----<link linkend="GtkContainer">GtkContainer</link>
                           +----<link linkend="GtkBin">GtkBin</link>
                                 +----<link linkend="GtkWindow">GtkWindow</link>
                                       +----<link linkend="GtkPlug">GtkPlug</link>
                                             +----AwnApplet
                                                   +----<link linkend="AwnAppletSimple">AwnAppletSimple</link>
</synopsis>
</refsect1>



<refsect1 id="AwnApplet.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
AwnApplet implements
 <link linkend="AtkImplementorIface">AtkImplementorIface</link> and  <link linkend="GtkBuildable">GtkBuildable</link>.</para>
</refsect1>


<refsect1 id="AwnApplet.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="AwnApplet--canonical-name">canonical-name</link>&quot;           <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only
  &quot;<link linkend="AwnApplet--display-name">display-name</link>&quot;             <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="AwnApplet--max-size">max-size</link>&quot;                 <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="AwnApplet--offset">offset</link>&quot;                   <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="AwnApplet--offset-modifier">offset-modifier</link>&quot;          <link linkend="gfloat">gfloat</link>                : Read / Write
  &quot;<link linkend="AwnApplet--panel-id">panel-id</link>&quot;                 <link linkend="gint">gint</link>                  : Read / Write / Construct Only
  &quot;<link linkend="AwnApplet--panel-xid">panel-xid</link>&quot;                <link linkend="gint64">gint64</link>                : Read
  &quot;<link linkend="AwnApplet--path-type">path-type</link>&quot;                <link linkend="gint">gint</link>                  : Read / Write / Construct
  &quot;<link linkend="AwnApplet--position">position</link>&quot;                 <link linkend="GtkPositionType">GtkPositionType</link>       : Read / Write
  &quot;<link linkend="AwnApplet--quit-on-delete">quit-on-delete</link>&quot;           <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="AwnApplet--show-all-on-embed">show-all-on-embed</link>&quot;        <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="AwnApplet--size">size</link>&quot;                     <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="AwnApplet--uid">uid</link>&quot;                      <link linkend="gchar">gchar</link>*                : Read / Write / Construct
</synopsis>
</refsect1>

<refsect1 id="AwnApplet.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="AwnApplet-applet-deleted">applet-deleted</link>&quot;                                 : Run First
  &quot;<link linkend="AwnApplet-flags-changed">flags-changed</link>&quot;                                  : Run First
  &quot;<link linkend="AwnApplet-menu-creation">menu-creation</link>&quot;                                  : Run First
  &quot;<link linkend="AwnApplet-offset-changed">offset-changed</link>&quot;                                 : Run First
  &quot;<link linkend="AwnApplet-origin-changed">origin-changed</link>&quot;                                 : Run Last
  &quot;<link linkend="AwnApplet-panel-configure-event">panel-configure-event</link>&quot;                          : Run Last
  &quot;<link linkend="AwnApplet-position-changed">position-changed</link>&quot;                               : Run First
  &quot;<link linkend="AwnApplet-size-changed">size-changed</link>&quot;                                   : Run First
</synopsis>
</refsect1>


<refsect1 id="AwnApplet.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="AwnApplet.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="AwnAppletPrivate" role="struct">
<title>AwnAppletPrivate</title>
<indexterm zone="AwnAppletPrivate"><primary sortas="AwnAppletPrivate">AwnAppletPrivate</primary></indexterm><programlisting>typedef struct _AwnAppletPrivate AwnAppletPrivate;</programlisting>
<para>
</para></refsect2>
<refsect2 id="AwnApplet-struct" role="struct">
<title>AwnApplet</title>
<indexterm zone="AwnApplet-struct"><primary sortas="AwnApplet">AwnApplet</primary></indexterm><programlisting>typedef struct _AwnApplet AwnApplet;</programlisting>
<para>
</para></refsect2>
<refsect2 id="AwnAppletInitFunc" role="function">
<title>AwnAppletInitFunc ()</title>
<indexterm zone="AwnAppletInitFunc"><primary sortas="AwnAppletInitFunc">AwnAppletInitFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*AwnAppletInitFunc)                (<link linkend="AwnApplet">AwnApplet</link> *applet);</programlisting>
<para>
Function prototype used as entry point for applets.
Hook to have an <link linkend="AwnApplet"><type>AwnApplet</type></link> built for you.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> AwnApplet instance created for you.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> return TRUE if applet construction was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="AwnAppletInitPFunc" role="function">
<title>AwnAppletInitPFunc ()</title>
<indexterm zone="AwnAppletInitPFunc"><primary sortas="AwnAppletInitPFunc">AwnAppletInitPFunc</primary></indexterm><programlisting><link linkend="AwnApplet">AwnApplet</link> *         (*AwnAppletInitPFunc)               (const <link linkend="gchar">gchar</link> *canonical_name,
                                                         const <link linkend="gchar">gchar</link> *uid,
                                                         <link linkend="gint">gint</link> panel_id);</programlisting>
<para>
Function prototype used as entry point for applets.
Hook to build your own <link linkend="AwnApplet"><type>AwnApplet</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>canonical_name</parameter>&#160;:</term>
<listitem><simpara> applet's canonical name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&#160;:</term>
<listitem><simpara> applet's unique ID.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>panel_id</parameter>&#160;:</term>
<listitem><simpara> ID of AwnPanel associated with this applet.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> return the constructed <link linkend="AwnApplet"><type>AwnApplet</type></link> (or its subclass) or NULL.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-new" role="function">
<title>awn_applet_new ()</title>
<indexterm zone="awn-applet-new"><primary sortas="awn_applet_new">awn_applet_new</primary></indexterm><programlisting><link linkend="AwnApplet">AwnApplet</link> *         awn_applet_new                      (const <link linkend="gchar">gchar</link> *canonical_name,
                                                         const <link linkend="gchar">gchar</link> *uid,
                                                         <link linkend="gint">gint</link> panel_id);</programlisting>
<para>
Creates a new AwnApplet which tries to connect via DBus to AwnPanel
with the given ID. You can pass zero <parameter>panel_id</parameter> to not connect to any panel.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>canonical_name</parameter>&#160;:</term>
<listitem><simpara> canonical name of the applet.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&#160;:</term>
<listitem><simpara> unique ID of the applet.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>panel_id</parameter>&#160;:</term>
<listitem><simpara> ID of AwnPanel associated with the applet.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new AwnApplet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-get-canonical-name" role="function">
<title>awn_applet_get_canonical_name ()</title>
<indexterm zone="awn-applet-get-canonical-name"><primary sortas="awn_applet_get_canonical_name">awn_applet_get_canonical_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        awn_applet_get_canonical_name       (<link linkend="AwnApplet">AwnApplet</link> *applet);</programlisting>
<para>
Retrieve the applet's canonical name.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the applet's canonical name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-get-pos-type" role="function">
<title>awn_applet_get_pos_type ()</title>
<indexterm zone="awn-applet-get-pos-type"><primary sortas="awn_applet_get_pos_type">awn_applet_get_pos_type</primary></indexterm><programlisting><link linkend="GtkPositionType">GtkPositionType</link>     awn_applet_get_pos_type             (<link linkend="AwnApplet">AwnApplet</link> *applet);</programlisting>
<para>
Gets current position of the applet. See <link linkend="awn-applet-set-pos-type"><function>awn_applet_set_pos_type()</function></link>.
This value corresponds to the value used by the associated panel.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> current position of the applet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-set-pos-type" role="function">
<title>awn_applet_set_pos_type ()</title>
<indexterm zone="awn-applet-set-pos-type"><primary sortas="awn_applet_set_pos_type">awn_applet_set_pos_type</primary></indexterm><programlisting><link linkend="void">void</link>                awn_applet_set_pos_type             (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="GtkPositionType">GtkPositionType</link> position);</programlisting>
<para>
Sets current position of the applet. Note that setting the position 
emits the <link linkend="AwnApplet-position-changed"><type>"position-changed"</type></link> signal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>position</parameter>&#160;:</term>
<listitem><simpara> new position of the applet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-get-path-type" role="function">
<title>awn_applet_get_path_type ()</title>
<indexterm zone="awn-applet-get-path-type"><primary sortas="awn_applet_get_path_type">awn_applet_get_path_type</primary></indexterm><programlisting><link linkend="AwnPathType">AwnPathType</link>         awn_applet_get_path_type            (<link linkend="AwnApplet">AwnApplet</link> *applet);</programlisting>
<para>
Gets currently used path type for this applet. This value corresponds
to the value used by the associated panel.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> currently used path type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-set-path-type" role="function">
<title>awn_applet_set_path_type ()</title>
<indexterm zone="awn-applet-set-path-type"><primary sortas="awn_applet_set_path_type">awn_applet_set_path_type</primary></indexterm><programlisting><link linkend="void">void</link>                awn_applet_set_path_type            (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="AwnPathType">AwnPathType</link> path);</programlisting>
<para>
Sets path type used by this applet. See <link linkend="awn-applet-get-offset-at"><function>awn_applet_get_offset_at()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> path type for this applet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-get-offset" role="function">
<title>awn_applet_get_offset ()</title>
<indexterm zone="awn-applet-get-offset"><primary sortas="awn_applet_get_offset">awn_applet_get_offset</primary></indexterm><programlisting><link linkend="gint">gint</link>                awn_applet_get_offset               (<link linkend="AwnApplet">AwnApplet</link> *applet);</programlisting>
<para>
Gets current offset set for the applet. This value corresponds
to the value used by the associated panel.
<parameter>see_also</parameter>: <link linkend="awn-applet-get-offset-at"><function>awn_applet_get_offset_at()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> current offset.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-get-offset-at" role="function">
<title>awn_applet_get_offset_at ()</title>
<indexterm zone="awn-applet-get-offset-at"><primary sortas="awn_applet_get_offset_at">awn_applet_get_offset_at</primary></indexterm><programlisting><link linkend="gint">gint</link>                awn_applet_get_offset_at            (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y);</programlisting>
<para>
<parameter>see_also</parameter>: <link linkend="awn-applet-set-path-type"><function>awn_applet_set_path_type()</function></link>.
</para>
<para>
Gets offset for widget with [<parameter>x</parameter>, <parameter>y</parameter>] coordinates with respect to the current
path type.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> X-coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> Y-coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> offset which should have the widget with [x, y] coordinates.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-set-offset" role="function">
<title>awn_applet_set_offset ()</title>
<indexterm zone="awn-applet-set-offset"><primary sortas="awn_applet_set_offset">awn_applet_set_offset</primary></indexterm><programlisting><link linkend="void">void</link>                awn_applet_set_offset               (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="gint">gint</link> offset);</programlisting>
<para>
Sets offset used by this applet. Note that setting the offset emits the
<link linkend="AwnApplet-offset-changed"><type>"offset-changed"</type></link> signal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&#160;:</term>
<listitem><simpara> new offset for this applet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-get-size" role="function">
<title>awn_applet_get_size ()</title>
<indexterm zone="awn-applet-get-size"><primary sortas="awn_applet_get_size">awn_applet_get_size</primary></indexterm><programlisting><link linkend="gint">gint</link>                awn_applet_get_size                 (<link linkend="AwnApplet">AwnApplet</link> *applet);</programlisting>
<para>
Gets the current size set for the applet. This value corresponds
to the value used by the associated panel.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> current size set for the applet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-set-size" role="function">
<title>awn_applet_set_size ()</title>
<indexterm zone="awn-applet-set-size"><primary sortas="awn_applet_set_size">awn_applet_set_size</primary></indexterm><programlisting><link linkend="void">void</link>                awn_applet_set_size                 (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="gint">gint</link> size);</programlisting>
<para>
Sets new size for the applet. Note that setting the size emits the
<link linkend="AwnApplet-size-changed"><type>"size-changed"</type></link> signal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> new size of the applet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-get-uid" role="function">
<title>awn_applet_get_uid ()</title>
<indexterm zone="awn-applet-get-uid"><primary sortas="awn_applet_get_uid">awn_applet_get_uid</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       awn_applet_get_uid                  (<link linkend="AwnApplet">AwnApplet</link> *applet);</programlisting>
<para>
Gets the unique ID for the applet.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> unique ID for the applet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-set-uid" role="function">
<title>awn_applet_set_uid ()</title>
<indexterm zone="awn-applet-set-uid"><primary sortas="awn_applet_set_uid">awn_applet_set_uid</primary></indexterm><programlisting><link linkend="void">void</link>                awn_applet_set_uid                  (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         const <link linkend="gchar">gchar</link> *uid);</programlisting>
<para>
Sets new unique ID for the applet.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&#160;:</term>
<listitem><simpara> new unique ID for the applet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-get-behavior" role="function">
<title>awn_applet_get_behavior ()</title>
<indexterm zone="awn-applet-get-behavior"><primary sortas="awn_applet_get_behavior">awn_applet_get_behavior</primary></indexterm><programlisting><link linkend="AwnAppletFlags">AwnAppletFlags</link>      awn_applet_get_behavior             (<link linkend="AwnApplet">AwnApplet</link> *applet);</programlisting>
<para>
Gets the flags set for this applet.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> flags set for this applet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-set-behavior" role="function">
<title>awn_applet_set_behavior ()</title>
<indexterm zone="awn-applet-set-behavior"><primary sortas="awn_applet_set_behavior">awn_applet_set_behavior</primary></indexterm><programlisting><link linkend="void">void</link>                awn_applet_set_behavior             (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="AwnAppletFlags">AwnAppletFlags</link> flags);</programlisting>
<para>
Sets behavior flags for this applet. Note that setting the flags to
<link linkend="AWN-APPLET-IS-SEPARATOR--CAPS"><type>AWN_APPLET_IS_SEPARATOR</type></link> or <link linkend="AWN-APPLET-IS-EXPANDER--CAPS"><type>AWN_APPLET_IS_EXPANDER</type></link> will send a DBus request
to the associated AwnPanel which will destroy the socket used by this applet.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> flags for this applet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-create-default-menu" role="function">
<title>awn_applet_create_default_menu ()</title>
<indexterm zone="awn-applet-create-default-menu"><primary sortas="awn_applet_create_default_menu">awn_applet_create_default_menu</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*          awn_applet_create_default_menu      (<link linkend="AwnApplet">AwnApplet</link> *applet);</programlisting>
<para>
Creates an default applet context menu. Includes a dock preferences menu
item</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> An AwnApplet.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A default <link linkend="GtkMenu"><type>GtkMenu</type></link> for <link linkend="AwnApplet"><type>AwnApplet</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-inhibit-autohide" role="function">
<title>awn_applet_inhibit_autohide ()</title>
<indexterm zone="awn-applet-inhibit-autohide"><primary sortas="awn_applet_inhibit_autohide">awn_applet_inhibit_autohide</primary></indexterm><programlisting><link linkend="guint">guint</link>               awn_applet_inhibit_autohide         (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         const <link linkend="gchar">gchar</link> *reason);</programlisting>
<para>
Requests the associated AwnPanel to disable autohide (if the panel is
already hidden it will unhide) until a call to
<link linkend="awn-applet-uninhibit-autohide"><function>awn_applet_uninhibit_autohide()</function></link> with the returned ID is made.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&#160;:</term>
<listitem><simpara> reason for the inhibit.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> cookie ID which can be used in <link linkend="awn-applet-uninhibit-autohide"><function>awn_applet_uninhibit_autohide()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-uninhibit-autohide" role="function">
<title>awn_applet_uninhibit_autohide ()</title>
<indexterm zone="awn-applet-uninhibit-autohide"><primary sortas="awn_applet_uninhibit_autohide">awn_applet_uninhibit_autohide</primary></indexterm><programlisting><link linkend="void">void</link>                awn_applet_uninhibit_autohide       (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="guint">guint</link> cookie);</programlisting>
<para>
Uninhibits autohide of the associated AwnPanel.
See <link linkend="awn-applet-inhibit-autohide"><function>awn_applet_inhibit_autohide()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="AwnApplet"><type>AwnApplet</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cookie</parameter>&#160;:</term>
<listitem><simpara> inhibit cookie returned by the call
         to <link linkend="awn-applet-inhibit-autohide"><function>awn_applet_inhibit_autohide()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-docklet-request" role="function">
<title>awn_applet_docklet_request ()</title>
<indexterm zone="awn-applet-docklet-request"><primary sortas="awn_applet_docklet_request">awn_applet_docklet_request</primary></indexterm><programlisting><link linkend="GdkNativeWindow">GdkNativeWindow</link>     awn_applet_docklet_request          (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         <link linkend="gint">gint</link> min_size,
                                                         <link linkend="gboolean">gboolean</link> shrink,
                                                         <link linkend="gboolean">gboolean</link> expand);</programlisting>
<para>
Requests docklet mode from the associated AwnPanel - all applets will be
hidden and only one window will be shown.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> AwnApplet instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>min_size</parameter>&#160;:</term>
<listitem><simpara> Minimum size required.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>shrink</parameter>&#160;:</term>
<listitem><simpara> If true and the panel has greater size than requested, it will
         shrink to min_size. Otherwise current panel size will be allocated.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expand</parameter>&#160;:</term>
<listitem><simpara> If true the embedded window will be allowed to expand, otherwise
         the window will be restricted to min_size.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> non-zero window XID which can be passed to GtkPlug constructor, 
or zero if the call failed (or another application is currently using
docklet mode).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-create-pref-item" role="function">
<title>awn_applet_create_pref_item ()</title>
<indexterm zone="awn-applet-create-pref-item"><primary sortas="awn_applet_create_pref_item">awn_applet_create_pref_item</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link> *         awn_applet_create_pref_item         (void);</programlisting>
<para>
Create a Dock Preferences menu item.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GtkImageMenuItem"><type>GtkImageMenuItem</type></link> for the Dock Preferences that can be added to
an applet icon's context menu.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-create-about-item" role="function">
<title>awn_applet_create_about_item ()</title>
<indexterm zone="awn-applet-create-about-item"><primary sortas="awn_applet_create_about_item">awn_applet_create_about_item</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link> *         awn_applet_create_about_item        (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         const <link linkend="gchar">gchar</link> *copyright,
                                                         <link linkend="AwnAppletLicense">AwnAppletLicense</link> license,
                                                         const <link linkend="gchar">gchar</link> *version,
                                                         const <link linkend="gchar">gchar</link> *comments,
                                                         const <link linkend="gchar">gchar</link> *website,
                                                         const <link linkend="gchar">gchar</link> *website_label,
                                                         const <link linkend="gchar">gchar</link> *icon_name,
                                                         const <link linkend="gchar">gchar</link> *translator_credits,
                                                         const <link linkend="gchar">gchar</link> **authors,
                                                         const <link linkend="gchar">gchar</link> **artists,
                                                         const <link linkend="gchar">gchar</link> **documenters);</programlisting>
<para>
Creates an about dialog and an associated menu item for use in the applet's
context menu. The <parameter>copyright</parameter> and <parameter>license</parameter> parameters are
mandatory. The rest are optional. See also <link linkend="GtkAboutDialog"><type>GtkAboutDialog</type></link> for a description
of the parameters other than <parameter>license</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> An AwnApplet.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>copyright</parameter>&#160;:</term>
<listitem><simpara> The copyright holder string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>license</parameter>&#160;:</term>
<listitem><simpara> Must be one of the values enumerated in <link linkend="AwnAppletLicense"><type>AwnAppletLicense</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara> Applet version string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>comments</parameter>&#160;:</term>
<listitem><simpara> Comment string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>website</parameter>&#160;:</term>
<listitem><simpara> Website string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>website_label</parameter>&#160;:</term>
<listitem><simpara> Website label string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara> Icon name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>translator_credits</parameter>&#160;:</term>
<listitem><simpara> Translator's credit string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>authors</parameter>&#160;:</term>
<listitem><simpara> Array of author strings.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>artists</parameter>&#160;:</term>
<listitem><simpara> Array of artist strings.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>documenters</parameter>&#160;:</term>
<listitem><simpara> Array of documentor strings.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> An "about applet" <link linkend="GtkMenuItem"><type>GtkMenuItem</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-applet-create-about-item-simple" role="function">
<title>awn_applet_create_about_item_simple ()</title>
<indexterm zone="awn-applet-create-about-item-simple"><primary sortas="awn_applet_create_about_item_simple">awn_applet_create_about_item_simple</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link> *         awn_applet_create_about_item_simple (<link linkend="AwnApplet">AwnApplet</link> *applet,
                                                         const <link linkend="gchar">gchar</link> *copyright,
                                                         <link linkend="AwnAppletLicense">AwnAppletLicense</link> license,
                                                         const <link linkend="gchar">gchar</link> *version);</programlisting>
<para>
Creates an about dialog and an associated menu item for use in the applet's
context menu. The <parameter>copyright</parameter> and <parameter>license</parameter> parameters are
mandatory. See also <link linkend="GtkAboutDialog"><type>GtkAboutDialog</type></link> for a description
of the parameters other than <parameter>license</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>applet</parameter>&#160;:</term>
<listitem><simpara> An AwnApplet.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>copyright</parameter>&#160;:</term>
<listitem><simpara> The copyright holder string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>license</parameter>&#160;:</term>
<listitem><simpara> Must be one of the values enumerated in <link linkend="AwnAppletLicense"><type>AwnAppletLicense</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara> Applet version string.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> An "about applet" <link linkend="GtkMenuItem"><type>GtkMenuItem</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="AwnApplet.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="AwnApplet--canonical-name" role="property"><title>The <literal>&quot;canonical-name&quot;</literal> property</title>
<indexterm zone="AwnApplet--canonical-name"><primary sortas="AwnApplet:canonical-name">AwnApplet:canonical-name</primary></indexterm><programlisting>  &quot;canonical-name&quot;           <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only</programlisting>
<para>
The canonical name of the applet. The format should be considered the
same as a GObject property name: [a-zA-Z][a-zA-Z0-9_\-]
In English, the first character must be a lowercase letter of the English
alphabet, and the following character(s) can be one or more lowercase
English letters, numbers, and/or minus characters.
</para>
<para>
For all applets in the Awn Extras project, this name should be the same as
the main directory as the applet sources.
</para>
<para>
<note>For Python applets, it should also be the same name as the main
applet script.</note></para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AwnApplet--display-name" role="property"><title>The <literal>&quot;display-name&quot;</literal> property</title>
<indexterm zone="AwnApplet--display-name"><primary sortas="AwnApplet:display-name">AwnApplet:display-name</primary></indexterm><programlisting>  &quot;display-name&quot;             <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>Display name for the applet.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AwnApplet--max-size" role="property"><title>The <literal>&quot;max-size&quot;</literal> property</title>
<indexterm zone="AwnApplet--max-size"><primary sortas="AwnApplet:max-size">AwnApplet:max-size</primary></indexterm><programlisting>  &quot;max-size&quot;                 <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>
The maximum visible size of the applet.</para>
<para>
</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 48</para>
</refsect2>
<refsect2 id="AwnApplet--offset" role="property"><title>The <literal>&quot;offset&quot;</literal> property</title>
<indexterm zone="AwnApplet--offset"><primary sortas="AwnApplet:offset">AwnApplet:offset</primary></indexterm><programlisting>  &quot;offset&quot;                   <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>
The icon offset of the bar.</para>
<para>
</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="AwnApplet--offset-modifier" role="property"><title>The <literal>&quot;offset-modifier&quot;</literal> property</title>
<indexterm zone="AwnApplet--offset-modifier"><primary sortas="AwnApplet:offset-modifier">AwnApplet:offset-modifier</primary></indexterm><programlisting>  &quot;offset-modifier&quot;          <link linkend="gfloat">gfloat</link>                : Read / Write</programlisting>
<para>
The offset modifier for non-linear path types.</para>
<para>
</para><para>Default value: 1</para>
</refsect2>
<refsect2 id="AwnApplet--panel-id" role="property"><title>The <literal>&quot;panel-id&quot;</literal> property</title>
<indexterm zone="AwnApplet--panel-id"><primary sortas="AwnApplet:panel-id">AwnApplet:panel-id</primary></indexterm><programlisting>  &quot;panel-id&quot;                 <link linkend="gint">gint</link>                  : Read / Write / Construct Only</programlisting>
<para>
The id of the Awn Panel the applet connects to.</para>
<para>
</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="AwnApplet--panel-xid" role="property"><title>The <literal>&quot;panel-xid&quot;</literal> property</title>
<indexterm zone="AwnApplet--panel-xid"><primary sortas="AwnApplet:panel-xid">AwnApplet:panel-xid</primary></indexterm><programlisting>  &quot;panel-xid&quot;                <link linkend="gint64">gint64</link>                : Read</programlisting>
<para>
The XID of the awn panel the applet is connected to.</para>
<para>
</para><para>Default value: 0</para>
</refsect2>
<refsect2 id="AwnApplet--path-type" role="property"><title>The <literal>&quot;path-type&quot;</literal> property</title>
<indexterm zone="AwnApplet--path-type"><primary sortas="AwnApplet:path-type">AwnApplet:path-type</primary></indexterm><programlisting>  &quot;path-type&quot;                <link linkend="gint">gint</link>                  : Read / Write / Construct</programlisting>
<para>Path used on the panel.</para><para>Allowed values: [0,1]</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="AwnApplet--position" role="property"><title>The <literal>&quot;position&quot;</literal> property</title>
<indexterm zone="AwnApplet--position"><primary sortas="AwnApplet:position">AwnApplet:position</primary></indexterm><programlisting>  &quot;position&quot;                 <link linkend="GtkPositionType">GtkPositionType</link>       : Read / Write</programlisting>
<para>
The current bar position.</para>
<para>
</para><para>Default value: GTK_POS_BOTTOM</para>
</refsect2>
<refsect2 id="AwnApplet--quit-on-delete" role="property"><title>The <literal>&quot;quit-on-delete&quot;</literal> property</title>
<indexterm zone="AwnApplet--quit-on-delete"><primary sortas="AwnApplet:quit-on-delete">AwnApplet:quit-on-delete</primary></indexterm><programlisting>  &quot;quit-on-delete&quot;           <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Whether the applet quits when it's socket is destroyed.</para>
<para>
</para><para>Default value: TRUE</para>
</refsect2>
<refsect2 id="AwnApplet--show-all-on-embed" role="property"><title>The <literal>&quot;show-all-on-embed&quot;</literal> property</title>
<indexterm zone="AwnApplet--show-all-on-embed"><primary sortas="AwnApplet:show-all-on-embed">AwnApplet:show-all-on-embed</primary></indexterm><programlisting>  &quot;show-all-on-embed&quot;        <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>The applet will automatically call show_all when it's embedded in the socket.</para><para>Default value: TRUE</para>
</refsect2>
<refsect2 id="AwnApplet--size" role="property"><title>The <literal>&quot;size&quot;</literal> property</title>
<indexterm zone="AwnApplet--size"><primary sortas="AwnApplet:size">AwnApplet:size</primary></indexterm><programlisting>  &quot;size&quot;                     <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>
The current visible size of the bar.</para>
<para>
</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 48</para>
</refsect2>
<refsect2 id="AwnApplet--uid" role="property"><title>The <literal>&quot;uid&quot;</literal> property</title>
<indexterm zone="AwnApplet--uid"><primary sortas="AwnApplet:uid">AwnApplet:uid</primary></indexterm><programlisting>  &quot;uid&quot;                      <link linkend="gchar">gchar</link>*                : Read / Write / Construct</programlisting>
<para>Awn's Unique ID for this applet instance.</para><para>Default value: NULL</para>
</refsect2>
</refsect1>

<refsect1 id="AwnApplet.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="AwnApplet-applet-deleted" role="signal"><title>The <literal>&quot;applet-deleted&quot;</literal> signal</title>
<indexterm zone="AwnApplet-applet-deleted"><primary sortas="AwnApplet::applet-deleted">AwnApplet::applet-deleted</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="AwnApplet">AwnApplet</link> *awnapplet,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>awnapplet</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AwnApplet-flags-changed" role="signal"><title>The <literal>&quot;flags-changed&quot;</literal> signal</title>
<indexterm zone="AwnApplet-flags-changed"><primary sortas="AwnApplet::flags-changed">AwnApplet::flags-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="AwnApplet">AwnApplet</link> *awnapplet,
                                                        <link linkend="gint">gint</link>       arg1,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>awnapplet</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AwnApplet-menu-creation" role="signal"><title>The <literal>&quot;menu-creation&quot;</literal> signal</title>
<indexterm zone="AwnApplet-menu-creation"><primary sortas="AwnApplet::menu-creation">AwnApplet::menu-creation</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="AwnApplet">AwnApplet</link> *awnapplet,
                                                        <link linkend="GtkMenu">GtkMenu</link>   *arg1,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>awnapplet</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AwnApplet-offset-changed" role="signal"><title>The <literal>&quot;offset-changed&quot;</literal> signal</title>
<indexterm zone="AwnApplet-offset-changed"><primary sortas="AwnApplet::offset-changed">AwnApplet::offset-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="AwnApplet">AwnApplet</link> *awnapplet,
                                                        <link linkend="gint">gint</link>       arg1,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>awnapplet</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AwnApplet-origin-changed" role="signal"><title>The <literal>&quot;origin-changed&quot;</literal> signal</title>
<indexterm zone="AwnApplet-origin-changed"><primary sortas="AwnApplet::origin-changed">AwnApplet::origin-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="AwnApplet">AwnApplet</link>    *awnapplet,
                                                        <link linkend="GdkRectangle">GdkRectangle</link> *arg1,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>awnapplet</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AwnApplet-panel-configure-event" role="signal"><title>The <literal>&quot;panel-configure-event&quot;</literal> signal</title>
<indexterm zone="AwnApplet-panel-configure-event"><primary sortas="AwnApplet::panel-configure-event">AwnApplet::panel-configure-event</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="AwnApplet">AwnApplet</link> *awnapplet,
                                                        <link linkend="GdkEvent">GdkEvent</link>  *event,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>awnapplet</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AwnApplet-position-changed" role="signal"><title>The <literal>&quot;position-changed&quot;</literal> signal</title>
<indexterm zone="AwnApplet-position-changed"><primary sortas="AwnApplet::position-changed">AwnApplet::position-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="AwnApplet">AwnApplet</link>      *awnapplet,
                                                        <link linkend="GtkPositionType">GtkPositionType</link> arg1,
                                                        <link linkend="gpointer">gpointer</link>        user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>awnapplet</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AwnApplet-size-changed" role="signal"><title>The <literal>&quot;size-changed&quot;</literal> signal</title>
<indexterm zone="AwnApplet-size-changed"><primary sortas="AwnApplet::size-changed">AwnApplet::size-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="AwnApplet">AwnApplet</link> *awnapplet,
                                                        <link linkend="gint">gint</link>       arg1,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>awnapplet</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
