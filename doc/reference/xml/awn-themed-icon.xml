<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="AwnThemedIcon">
<refmeta>
<refentrytitle role="top_of_page" id="AwnThemedIcon.top_of_page">AwnThemedIcon</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBAWN Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AwnThemedIcon</refname>
<refpurpose>A AwnIcon subclass that provides gtk themed icon support</refpurpose>
</refnamediv>
<refsect1 id="AwnThemedIcon.stability-level">
<title>Stability Level</title>
Unstable, unless otherwise indicated
</refsect1>

<refsynopsisdiv id="AwnThemedIcon.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;libawn/libawn.h&gt;

                    <link linkend="AwnThemedIconPrivate">AwnThemedIconPrivate</link>;
                    <link linkend="AwnThemedIcon-struct">AwnThemedIcon</link>;
<link linkend="GtkWidget">GtkWidget</link> *         <link linkend="awn-themed-icon-new">awn_themed_icon_new</link>                 (void);
<link linkend="void">void</link>                <link linkend="awn-themed-icon-set-state">awn_themed_icon_set_state</link>           (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *state);
const <link linkend="gchar">gchar</link> *       <link linkend="awn-themed-icon-get-state">awn_themed_icon_get_state</link>           (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon);
<link linkend="void">void</link>                <link linkend="awn-themed-icon-set-size">awn_themed_icon_set_size</link>            (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         <link linkend="gint">gint</link> size);
<link linkend="gint">gint</link>                <link linkend="awn-themed-icon-get-size">awn_themed_icon_get_size</link>            (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon);
const <link linkend="gchar">gchar</link> *       <link linkend="awn-themed-icon-get-default-theme-name">awn_themed_icon_get_default_theme_name</link>
                                                        (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon);
<link linkend="void">void</link>                <link linkend="awn-themed-icon-set-info">awn_themed_icon_set_info</link>            (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *applet_name,
                                                         const <link linkend="gchar">gchar</link> *uid,
                                                         <link linkend="GStrv">GStrv</link> states,
                                                         <link linkend="GStrv">GStrv</link> icon_names);
<link linkend="void">void</link>                <link linkend="awn-themed-icon-set-info-simple">awn_themed_icon_set_info_simple</link>     (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *applet_name,
                                                         const <link linkend="gchar">gchar</link> *uid,
                                                         const <link linkend="gchar">gchar</link> *icon_name);
<link linkend="void">void</link>                <link linkend="awn-themed-icon-set-info-append">awn_themed_icon_set_info_append</link>     (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *state,
                                                         const <link linkend="gchar">gchar</link> *icon_name);
<link linkend="void">void</link>                <link linkend="awn-themed-icon-set-applet-info">awn_themed_icon_set_applet_info</link>     (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *applet_name,
                                                         const <link linkend="gchar">gchar</link> *uid);
<link linkend="void">void</link>                <link linkend="awn-themed-icon-override-gtk-theme">awn_themed_icon_override_gtk_theme</link>  (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *theme_name);
<link linkend="GdkPixbuf">GdkPixbuf</link> *         <link linkend="awn-themed-icon-get-icon-at-size">awn_themed_icon_get_icon_at_size</link>    (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         <link linkend="gint">gint</link> size,
                                                         const <link linkend="gchar">gchar</link> *state);
<link linkend="void">void</link>                <link linkend="awn-themed-icon-clear-icons">awn_themed_icon_clear_icons</link>         (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         <link linkend="gint">gint</link> scope);
<link linkend="void">void</link>                <link linkend="awn-themed-icon-clear-info">awn_themed_icon_clear_info</link>          (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon);
<link linkend="void">void</link>                <link linkend="awn-themed-icon-preload-icon">awn_themed_icon_preload_icon</link>        (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         <link linkend="gchar">gchar</link> *state,
                                                         <link linkend="gint">gint</link> size);
<link linkend="GtkIconTheme">GtkIconTheme</link> *      <link linkend="awn-themed-icon-get-awn-theme">awn_themed_icon_get_awn_theme</link>       (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon);
<link linkend="GtkWidget">GtkWidget</link> *         <link linkend="awn-themed-icon-create-custom-icon-item">awn_themed_icon_create_custom_icon_item</link>
                                                        (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *icon_name);
<link linkend="GtkWidget">GtkWidget</link> *         <link linkend="awn-themed-icon-create-remove-custom-icon-item">awn_themed_icon_create_remove_custom_icon_item</link>
                                                        (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *icon_name);
<link linkend="void">void</link>                <link linkend="awn-themed-icon-drag-data-received">awn_themed_icon_drag_data_received</link>  (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkDragContext">GdkDragContext</link> *context,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y,
                                                         <link linkend="GtkSelectionData">GtkSelectionData</link> *selection_data,
                                                         <link linkend="guint">guint</link> info,
                                                         <link linkend="guint">guint</link> evt_time);
</synopsis>
</refsynopsisdiv>

<refsect1 id="AwnThemedIcon.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="GInitiallyUnowned">GInitiallyUnowned</link>
         +----<link linkend="GtkObject">GtkObject</link>
               +----<link linkend="GtkWidget">GtkWidget</link>
                     +----<link linkend="GtkDrawingArea">GtkDrawingArea</link>
                           +----<link linkend="AwnIcon">AwnIcon</link>
                                 +----AwnThemedIcon
</synopsis>
</refsect1>



<refsect1 id="AwnThemedIcon.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
AwnThemedIcon implements
 <link linkend="AtkImplementorIface">AtkImplementorIface</link>,  <link linkend="GtkBuildable">GtkBuildable</link> and  <link linkend="AwnOverlayable">AwnOverlayable</link>.</para>
</refsect1>


<refsect1 id="AwnThemedIcon.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="AwnThemedIcon--applet-name">applet-name</link>&quot;              <link linkend="gchar">gchar</link>*                : Read / Write / Construct
  &quot;<link linkend="AwnThemedIcon--drag-and-drop">drag-and-drop</link>&quot;            <link linkend="gboolean">gboolean</link>              : Read / Write / Construct
  &quot;<link linkend="AwnThemedIcon--rotate">rotate</link>&quot;                   <link linkend="GdkPixbufRotation">GdkPixbufRotation</link>     : Read / Write / Construct
</synopsis>
</refsect1>



<refsect1 id="AwnThemedIcon.description" role="desc">
<title role="desc.title">Description</title>
<para>
Provides convenient support for one or more themed icons using lists of 
of icon names / icon states.  Includes support of transparent (to applet)
modification of displayed icons through drag and drop.  A subclass of AwnIcon.</para>
<para>
</para>
</refsect1>

<refsect1 id="AwnThemedIcon.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="AwnThemedIconPrivate" role="struct">
<title>AwnThemedIconPrivate</title>
<indexterm zone="AwnThemedIconPrivate"><primary sortas="AwnThemedIconPrivate">AwnThemedIconPrivate</primary></indexterm><programlisting>typedef struct _AwnThemedIconPrivate AwnThemedIconPrivate;</programlisting>
<para>
</para></refsect2>
<refsect2 id="AwnThemedIcon-struct" role="struct">
<title>AwnThemedIcon</title>
<indexterm zone="AwnThemedIcon-struct"><primary sortas="AwnThemedIcon">AwnThemedIcon</primary></indexterm><programlisting>typedef struct _AwnThemedIcon AwnThemedIcon;</programlisting>
<para>
Provides convenient support for one or more themed icons using lists of 
of icon names / icon states.  Includes support of transparent (to applet)
modification of displayed icons through drag and drop. A subclass of AwnIcon.</para>
<para>
</para></refsect2>
<refsect2 id="awn-themed-icon-new" role="function">
<title>awn_themed_icon_new ()</title>
<indexterm zone="awn-themed-icon-new"><primary sortas="awn_themed_icon_new">awn_themed_icon_new</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link> *         awn_themed_icon_new                 (void);</programlisting>
<para>
Creates a new instance of <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an instance of <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-set-state" role="function">
<title>awn_themed_icon_set_state ()</title>
<indexterm zone="awn-themed-icon-set-state"><primary sortas="awn_themed_icon_set_state">awn_themed_icon_set_state</primary></indexterm><programlisting><link linkend="void">void</link>                awn_themed_icon_set_state           (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *state);</programlisting>
<para>
Switches to the icon state specificed.  This will switch the displayed icon
to the corresponding themed icon.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara> The icon state that is to be enabled.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-get-state" role="function">
<title>awn_themed_icon_get_state ()</title>
<indexterm zone="awn-themed-icon-get-state"><primary sortas="awn_themed_icon_get_state">awn_themed_icon_get_state</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       awn_themed_icon_get_state           (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon);</programlisting>
<para>
Get the current icon state of the <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to the current icon state string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-set-size" role="function">
<title>awn_themed_icon_set_size ()</title>
<indexterm zone="awn-themed-icon-set-size"><primary sortas="awn_themed_icon_set_size">awn_themed_icon_set_size</primary></indexterm><programlisting><link linkend="void">void</link>                awn_themed_icon_set_size            (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         <link linkend="gint">gint</link> size);</programlisting>
<para>
Set the Icon size.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> An icon size
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-get-size" role="function">
<title>awn_themed_icon_get_size ()</title>
<indexterm zone="awn-themed-icon-get-size"><primary sortas="awn_themed_icon_get_size">awn_themed_icon_get_size</primary></indexterm><programlisting><link linkend="gint">gint</link>                awn_themed_icon_get_size            (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon);</programlisting>
<para>
Get the current icon size.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the current icon size.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-get-default-theme-name" role="function">
<title>awn_themed_icon_get_default_theme_name ()</title>
<indexterm zone="awn-themed-icon-get-default-theme-name"><primary sortas="awn_themed_icon_get_default_theme_name">awn_themed_icon_get_default_theme_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       awn_themed_icon_get_default_theme_name
                                                        (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon);</programlisting>
<para>
Retrieve the default system icon theme name</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the current default icon theme name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-set-info" role="function">
<title>awn_themed_icon_set_info ()</title>
<indexterm zone="awn-themed-icon-set-info"><primary sortas="awn_themed_icon_set_info">awn_themed_icon_set_info</primary></indexterm><programlisting><link linkend="void">void</link>                awn_themed_icon_set_info            (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *applet_name,
                                                         const <link linkend="gchar">gchar</link> *uid,
                                                         <link linkend="GStrv">GStrv</link> states,
                                                         <link linkend="GStrv">GStrv</link> icon_names);</programlisting>
<para>
Sets a list of Icon names and Icon states for the specific Applet name / UID 
instance.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>applet_name</parameter>&#160;:</term>
<listitem><simpara> The applet name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&#160;:</term>
<listitem><simpara> The applet's UID.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>states</parameter>&#160;:</term>
<listitem><simpara> A NULL terminated list of icon states.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_names</parameter>&#160;:</term>
<listitem><simpara> A NULL terminated list of theme icon names that corresponds to
the states arra.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-set-info-simple" role="function">
<title>awn_themed_icon_set_info_simple ()</title>
<indexterm zone="awn-themed-icon-set-info-simple"><primary sortas="awn_themed_icon_set_info_simple">awn_themed_icon_set_info_simple</primary></indexterm><programlisting><link linkend="void">void</link>                awn_themed_icon_set_info_simple     (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *applet_name,
                                                         const <link linkend="gchar">gchar</link> *uid,
                                                         const <link linkend="gchar">gchar</link> *icon_name);</programlisting>
<para>
Sets icon name for a specific Applet name / UID instance.  Used for Icons
that only have one icon.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>applet_name</parameter>&#160;:</term>
<listitem><simpara> The applet name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&#160;:</term>
<listitem><simpara> The applet's UID.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara> A themed icon name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-set-info-append" role="function">
<title>awn_themed_icon_set_info_append ()</title>
<indexterm zone="awn-themed-icon-set-info-append"><primary sortas="awn_themed_icon_set_info_append">awn_themed_icon_set_info_append</primary></indexterm><programlisting><link linkend="void">void</link>                awn_themed_icon_set_info_append     (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *state,
                                                         const <link linkend="gchar">gchar</link> *icon_name);</programlisting>
<para>
Appends a icon state/ icon name pair to the existing list of themed icons.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara> An Icon state.  
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara> A icon name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-set-applet-info" role="function">
<title>awn_themed_icon_set_applet_info ()</title>
<indexterm zone="awn-themed-icon-set-applet-info"><primary sortas="awn_themed_icon_set_applet_info">awn_themed_icon_set_applet_info</primary></indexterm><programlisting><link linkend="void">void</link>                awn_themed_icon_set_applet_info     (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *applet_name,
                                                         const <link linkend="gchar">gchar</link> *uid);</programlisting>
<para>
Sets the applet name / uid pair for the icon.  If an existing applet 
name has previously been set then the value will not be modified.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>applet_name</parameter>&#160;:</term>
<listitem><simpara> The applet name.  
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&#160;:</term>
<listitem><simpara> The UID of the applet instance.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-override-gtk-theme" role="function">
<title>awn_themed_icon_override_gtk_theme ()</title>
<indexterm zone="awn-themed-icon-override-gtk-theme"><primary sortas="awn_themed_icon_override_gtk_theme">awn_themed_icon_override_gtk_theme</primary></indexterm><programlisting><link linkend="void">void</link>                awn_themed_icon_override_gtk_theme  (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *theme_name);</programlisting>
<para>
Overrides the default icon theme with a different icon theme.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>theme_name</parameter>&#160;:</term>
<listitem><simpara> A icon theme name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-get-icon-at-size" role="function">
<title>awn_themed_icon_get_icon_at_size ()</title>
<indexterm zone="awn-themed-icon-get-icon-at-size"><primary sortas="awn_themed_icon_get_icon_at_size">awn_themed_icon_get_icon_at_size</primary></indexterm><programlisting><link linkend="GdkPixbuf">GdkPixbuf</link> *         awn_themed_icon_get_icon_at_size    (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         <link linkend="gint">gint</link> size,
                                                         const <link linkend="gchar">gchar</link> *state);</programlisting>
<para>
Retrieve an icon as a <link linkend="GdkPixbuf"><type>GdkPixbuf</type></link> at a specific size and for a specific
icon state.  Note that this will not change the currently displayed icon.
The caller is responsible of unreffing the pixbuf.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> A icon theme name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara> The desired icon state.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an <link linkend="GdkPixbuf"><type>GdkPixbuf</type></link> for the requested state of the requested size.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-clear-icons" role="function">
<title>awn_themed_icon_clear_icons ()</title>
<indexterm zone="awn-themed-icon-clear-icons"><primary sortas="awn_themed_icon_clear_icons">awn_themed_icon_clear_icons</primary></indexterm><programlisting><link linkend="void">void</link>                awn_themed_icon_clear_icons         (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         <link linkend="gint">gint</link> scope);</programlisting>
<para>
Delete icons from the custom awn-theme in $HOME/.icons/awn-theme</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scope</parameter>&#160;:</term>
<listitem><simpara> Scope to clear. One of SCOPE_AWN_THEME, SCOPE_AWN_APPLET, SCOPE_AWN_UID.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-clear-info" role="function">
<title>awn_themed_icon_clear_info ()</title>
<indexterm zone="awn-themed-icon-clear-info"><primary sortas="awn_themed_icon_clear_info">awn_themed_icon_clear_info</primary></indexterm><programlisting><link linkend="void">void</link>                awn_themed_icon_clear_info          (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon);</programlisting>
<para>
Clears any icon names and icon states that have been set for the Icon.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-preload-icon" role="function">
<title>awn_themed_icon_preload_icon ()</title>
<indexterm zone="awn-themed-icon-preload-icon"><primary sortas="awn_themed_icon_preload_icon">awn_themed_icon_preload_icon</primary></indexterm><programlisting><link linkend="void">void</link>                awn_themed_icon_preload_icon        (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         <link linkend="gchar">gchar</link> *state,
                                                         <link linkend="gint">gint</link> size);</programlisting>
<para>
Queues a preload of an icon.  The icon load and cache of the icon is 
queued using <link linkend="g-idle-add"><function>g_idle_add()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara> The icon state.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> The size of the icon.  A value less than or equal to 0  indicates the 
current size should be used.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-get-awn-theme" role="function">
<title>awn_themed_icon_get_awn_theme ()</title>
<indexterm zone="awn-themed-icon-get-awn-theme"><primary sortas="awn_themed_icon_get_awn_theme">awn_themed_icon_get_awn_theme</primary></indexterm><programlisting><link linkend="GtkIconTheme">GtkIconTheme</link> *      awn_themed_icon_get_awn_theme       (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon);</programlisting>
<para>
A convenience method for bindings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> The themed icon.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The current icon theme associated with the themed icon.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-create-custom-icon-item" role="function">
<title>awn_themed_icon_create_custom_icon_item ()</title>
<indexterm zone="awn-themed-icon-create-custom-icon-item"><primary sortas="awn_themed_icon_create_custom_icon_item">awn_themed_icon_create_custom_icon_item</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link> *         awn_themed_icon_create_custom_icon_item
                                                        (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *icon_name);</programlisting>
<para>
Creates a "Customize Icon" menu item.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara> The name of the customized icon.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GtkImageMenuItem"><type>GtkImageMenuItem</type></link> for the Customize Icon that can be added to
an applet icon's context menu.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-create-remove-custom-icon-item" role="function">
<title>awn_themed_icon_create_remove_custom_icon_item ()</title>
<indexterm zone="awn-themed-icon-create-remove-custom-icon-item"><primary sortas="awn_themed_icon_create_remove_custom_icon_item">awn_themed_icon_create_remove_custom_icon_item</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link> *         awn_themed_icon_create_remove_custom_icon_item
                                                        (<link linkend="AwnThemedIcon">AwnThemedIcon</link> *icon,
                                                         const <link linkend="gchar">gchar</link> *icon_name);</programlisting>
<para>
Creates a "Remove Customize Icon" menu item.  Will only be visible when a
custom icon is in use.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> A pointer to an <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara> A custom icon or name or NULL if the default customer icons are
to be used
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GtkImageMenuItem"><type>GtkImageMenuItem</type></link> for the Customize Icon that can be added to
an applet icon's context menu.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="awn-themed-icon-drag-data-received" role="function">
<title>awn_themed_icon_drag_data_received ()</title>
<indexterm zone="awn-themed-icon-drag-data-received"><primary sortas="awn_themed_icon_drag_data_received">awn_themed_icon_drag_data_received</primary></indexterm><programlisting><link linkend="void">void</link>                awn_themed_icon_drag_data_received  (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkDragContext">GdkDragContext</link> *context,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y,
                                                         <link linkend="GtkSelectionData">GtkSelectionData</link> *selection_data,
                                                         <link linkend="guint">guint</link> info,
                                                         <link linkend="guint">guint</link> evt_time);</programlisting>
<para>
This is exposed for applets that need to do their own drag and drop handling
but still want to chain the this function so it can handle icons that are 
dropped.  Use this by setting the drag_and_drop property of <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> 
and chaining to this function from the applet drag data received handler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> An <link linkend="AwnThemedIcon"><type>AwnThemedIcon</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The GDK drag context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> The X position of the drop.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> The Y position of the drop.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>selection_data</parameter>&#160;:</term>
<listitem><simpara> The received data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>info</parameter>&#160;:</term>
<listitem><simpara> The info that has been registered with the target in the <link linkend="GtkTargetList"><type>GtkTargetList</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>evt_time</parameter>&#160;:</term>
<listitem><simpara> The drag event time.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="AwnThemedIcon.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="AwnThemedIcon--applet-name" role="property"><title>The <literal>&quot;applet-name&quot;</literal> property</title>
<indexterm zone="AwnThemedIcon--applet-name"><primary sortas="AwnThemedIcon:applet-name">AwnThemedIcon:applet-name</primary></indexterm><programlisting>  &quot;applet-name&quot;              <link linkend="gchar">gchar</link>*                : Read / Write / Construct</programlisting>
<para>
The applet name.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AwnThemedIcon--drag-and-drop" role="property"><title>The <literal>&quot;drag-and-drop&quot;</literal> property</title>
<indexterm zone="AwnThemedIcon--drag-and-drop"><primary sortas="AwnThemedIcon:drag-and-drop">AwnThemedIcon:drag-and-drop</primary></indexterm><programlisting>  &quot;drag-and-drop&quot;            <link linkend="gboolean">gboolean</link>              : Read / Write / Construct</programlisting>
<para>
Whether to enable the dragging and dropping of icons, so that a user
can customize the icon via a user interface. One example of an applet
that would not want this behavior enabled is a trash applet that allowed
a user to drag and drop files onto it, in order to send them to the
trash.
</para>
<para>
If this value is <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>, the icon customization behavior can be used as
a fallback by calling <link linkend="awn-themed-icon-drag-data-received"><type>awn_themed_icon_drag_data_received</type></link> in a custom
signal handler for <link linkend="GtkWidget-drag-data-received"><type>"drag-data-received"</type></link>.</para>
<para>
</para><para>Default value: TRUE</para>
</refsect2>
<refsect2 id="AwnThemedIcon--rotate" role="property"><title>The <literal>&quot;rotate&quot;</literal> property</title>
<indexterm zone="AwnThemedIcon--rotate"><primary sortas="AwnThemedIcon:rotate">AwnThemedIcon:rotate</primary></indexterm><programlisting>  &quot;rotate&quot;                   <link linkend="GdkPixbufRotation">GdkPixbufRotation</link>     : Read / Write / Construct</programlisting>
<para>
Rotates the icon as per <link linkend="GdkPixbufRotation"><type>GdkPixbufRotation</type></link>.</para>
<para>
</para><para>Default value: GDK_PIXBUF_ROTATE_NONE</para>
</refsect2>
</refsect1>



<refsect1 id="AwnThemedIcon.see-also">
<title>See Also</title>
#AwnIcon, <link linkend="AwnOverlaidIcon"><type>AwnOverlaidIcon</type></link>, <link linkend="GtkIconTheme"><type>GtkIconTheme</type></link>
</refsect1>

</refentry>
